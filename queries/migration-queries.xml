<?xml version="1.0" encoding="UTF-8"?>
<migration>
  <!-- 전역 기본 설정 -->
  <settings>
    <!-- 데이터베이스 연결 설정 (dbinfo.json 참조) -->
    <sourceDatabase>sourceDB</sourceDatabase>
    <targetDatabase>targetDB</targetDatabase>
    <!-- 이관 기본 설정 -->
    <batchSize>${batchSize}</batchSize>
    <deleteBeforeInsert>true</deleteBeforeInsert>
  </settings>

  <!-- 전역 변수 정의 -->
  <variables>
    <var name="startDate">2024-01-01</var>
    <var name="endDate">2025-12-31</var>
    <var name="batchSize">1000</var>
    <var name="companyCode">COMPANY01</var>
    <var name="statusList">["ACTIVE", "PENDING", "APPROVED"]</var>
    <var name="categoryIds">[1, 2, 3, 5, 8]</var>
    <var name="departmentCodes">["IT", "HR", "SALES", "MARKETING"]</var>
    <var name="enableForeignKeyOrder">true</var>
    <var name="migrationTimestamp">2024-12-01 15:30:00</var>
    <var name="migrationUser">SYSTEM_MIGRATOR</var>
    <!-- 현재 시각 함수 사용 예시 -->
    <var name="currentTimestamp">${CURRENT_TIMESTAMP}</var>
    <var name="currentDate">${CURRENT_DATE}</var>
    <var name="currentTime">${CURRENT_TIME}</var>
  </variables>

  <!-- 전역 컬럼 오버라이드 설정 -->
  <globalColumnOverrides>
    <!-- 모든 쿼리에 공통으로 적용될 컬럼 값들 -->
    <override column="created_by">${migrationUser}</override>
    <override column="updated_by">${migrationUser}</override>
    <override column="migration_date">${migrationTimestamp}</override>
    <override column="processed_at">GETDATE()</override>
    <override column="data_version">2.1</override>
  </globalColumnOverrides>

  <!-- 전역 전처리/후처리 -->
  <globalProcesses>
    <!-- 전체 이관 시작 전 실행 -->
    <preProcess description="이관 준비 작업">
      <![CDATA[
        -- 성능 향상을 위한 인덱스 비활성화
        ALTER INDEX ALL ON users DISABLE;
        ALTER INDEX ALL ON products DISABLE;
        
        -- 제약조건 비활성화
        ALTER TABLE users NOCHECK CONSTRAINT ALL;
        ALTER TABLE products NOCHECK CONSTRAINT ALL;
        
        -- 통계 정보 업데이트
        UPDATE STATISTICS users;
        UPDATE STATISTICS products;
      ]]>
    </preProcess>
    
    <!-- 전체 이관 완료 후 실행 -->
    <postProcess description="이관 마무리 작업">
      <![CDATA[
        -- 인덱스 재활성화 및 재구성
        ALTER INDEX ALL ON users REBUILD;
        ALTER INDEX ALL ON products REBUILD;
        
        -- 제약조건 재활성화
        ALTER TABLE users CHECK CONSTRAINT ALL;
        ALTER TABLE products CHECK CONSTRAINT ALL;
        
        -- 통계 정보 업데이트
        UPDATE STATISTICS users WITH FULLSCAN;
        UPDATE STATISTICS products WITH FULLSCAN;
        
        -- 이관 완료 로그 기록
        INSERT INTO migration_log (migration_date, status, description) 
        VALUES (GETDATE(), 'COMPLETED', 'Data migration completed successfully');
      ]]>
    </postProcess>
  </globalProcesses>

  <!-- 동적 변수 정의 -->
  <dynamicVariables>
    <dynamicVar id="extract_active_user_ids" 
                description="활성 사용자 ID 목록 추출"
                variableName="activeUserIds"
                extractType="single_column"
                columnName="user_id"
                enabled="true">
      <![CDATA[
        SELECT user_id FROM users WHERE status = 'ACTIVE' AND last_login_date >= '${startDate}'
      ]]>
    </dynamicVar>

    <dynamicVar id="extract_company_mapping"
                description="회사 코드-이름 매핑 추출" 
                variableName="companyMapping"
                extractType="key_value_pairs"
                enabled="false">
      <![CDATA[
        SELECT company_code, company_name FROM companies WHERE status = 'ACTIVE'
      ]]>
    </dynamicVar>

    <dynamicVar id="extract_max_order_id"
                description="최대 주문 ID 추출"
                variableName="maxOrderId"
                extractType="single_value"
                enabled="false">
      <![CDATA[
        SELECT MAX(order_id) as max_id FROM orders
      ]]>
    </dynamicVar>

    <dynamicVar id="extract_category_products"
                description="특정 카테고리의 모든 상품 ID 추출"
                variableName="categoryProductIds"
                extractType="multiple_columns"
                columns="product_id,category_id"
                enabled="false">
      <![CDATA[
        SELECT product_id, category_id FROM products WHERE category_id IN (${categoryIds})
      ]]>
    </dynamicVar>

    <!-- 추가 multiple_columns 사용 예시들 -->
    <dynamicVar id="extract_all_entity_ids"
                description="여러 테이블의 ID 값들을 하나의 배열로 통합 추출"
                variableName="allEntityIds"
                extractType="multiple_columns"
                columns="user_id,department_id,manager_id"
                enabled="true">
      <![CDATA[
        SELECT DISTINCT
          u.user_id,
          u.department_id,
          d.manager_id
        FROM users u
        LEFT JOIN departments d ON u.department_id = d.department_id
        WHERE u.status IN (${statusList})
          AND u.created_date >= '${startDate}'
          AND u.user_id IS NOT NULL
          AND u.department_id IS NOT NULL
          AND d.manager_id IS NOT NULL
      ]]>
    </dynamicVar>

    <!-- 방법 1: 개별 컬럼별 동적 변수 (각 컬럼을 개별적으로 식별 가능) -->
    <dynamicVar id="extract_approver_codes"
                description="승인자 코드만 추출"
                variableName="approverCodes"
                extractType="single_column"
                columnName="approver_code"
                enabled="true">
      <![CDATA[
        SELECT DISTINCT ar.approver_code
        FROM approval_requests ar
        WHERE ar.status IN (${statusList})
          AND ar.created_date >= '${startDate}'
          AND ar.approver_code IS NOT NULL
      ]]>
    </dynamicVar>

    <dynamicVar id="extract_requester_codes"
                description="요청자 코드만 추출"
                variableName="requesterCodes"
                extractType="single_column"
                columnName="requester_code"
                enabled="true">
      <![CDATA[
        SELECT DISTINCT ar.requester_code
        FROM approval_requests ar
        WHERE ar.status IN (${statusList})
          AND ar.created_date >= '${startDate}'
          AND ar.requester_code IS NOT NULL
      ]]>
    </dynamicVar>

    <dynamicVar id="extract_product_codes"
                description="제품 코드만 추출"
                variableName="productCodes"
                extractType="single_column"
                columnName="product_code"
                enabled="true">
      <![CDATA[
        SELECT DISTINCT ar.product_code
        FROM approval_requests ar
        WHERE ar.status IN (${statusList})
          AND ar.created_date >= '${startDate}'
          AND ar.product_code IS NOT NULL
      ]]>
    </dynamicVar>

    <!-- 방법 2: 통합 추출 (기존 방식 유지) -->
    <dynamicVar id="extract_approval_codes"
                description="승인 관련 모든 코드들을 통합 추출 (컬럼 구분 불가)"
                variableName="allApprovalCodes"
                extractType="multiple_columns"
                columns="approver_code,requester_code,product_code"
                enabled="false">
      <![CDATA[
        SELECT DISTINCT 
          ar.approver_code,
          ar.requester_code,
          ar.product_code
        FROM approval_requests ar
        WHERE ar.status IN (${statusList})
          AND ar.created_date >= '${startDate}'
          AND ar.approver_code IS NOT NULL
          AND ar.requester_code IS NOT NULL
          AND ar.product_code IS NOT NULL
      ]]>
    </dynamicVar>

    <!-- 방법 3: 컬럼별 식별 가능한 구조로 추출 (NEW!) -->
    <dynamicVar id="extract_approval_codes_identified"
                description="승인 관련 코드들을 컬럼별로 식별 가능하게 추출"
                variableName="approvalCodesById"
                extractType="column_identified"
                columns="approver_code,requester_code,product_code"
                enabled="true">
      <![CDATA[
        SELECT DISTINCT 
          ar.approver_code,
          ar.requester_code,
          ar.product_code
        FROM approval_requests ar
        WHERE ar.status IN (${statusList})
          AND ar.created_date >= '${startDate}'
          AND ar.approver_code IS NOT NULL
          AND ar.requester_code IS NOT NULL
          AND ar.product_code IS NOT NULL
      ]]>
    </dynamicVar>
  </dynamicVariables>

  <!-- 쿼리 정의 -->
  <queries>
    <!-- 사용자 테이블 데이터 이관 -->
    <query id="migrate_users"
           description="사용자 테이블 데이터 이관"
           targetTable="users"
           targetColumns="user_id,username,email,created_date,status,migration_flag,updated_by,migration_date"
           primaryKey="user_id"
           enabled="true">
      <!-- 이 쿼리 실행 전 전처리 -->
      <preProcess description="사용자 테이블 이관 준비">
        <![CDATA[
          -- 임시 테이블 생성
          IF OBJECT_ID('tempdb..#temp_users') IS NOT NULL DROP TABLE #temp_users;
          CREATE TABLE #temp_users (user_id INT, old_status VARCHAR(50), new_status VARCHAR(50));
          
          -- 기존 데이터 백업
          INSERT INTO user_migration_backup 
          SELECT *, GETDATE() as backup_date FROM users 
          WHERE created_date >= '${startDate}' AND created_date <= '${endDate}';
          
          -- 로그 기록
          INSERT INTO migration_log (query_id, phase, message, created_date)
          VALUES ('migrate_users', 'PRE_PROCESS', 'User migration preparation completed', GETDATE());
        ]]>
      </preProcess>
      
      <sourceQuery>
        <![CDATA[
          SELECT user_id, username, email, created_date 
          FROM users 
          WHERE created_date >= '${startDate}' 
            AND created_date <= '${endDate}' 
          ORDER BY user_id
        ]]>
      </sourceQuery>
      
      <!-- 특정 컬럼에 고정값 설정 -->
      <columnOverrides>
        <override column="status">MIGRATED</override>
        <override column="migration_flag">1</override>
        <override column="updated_by">${migrationUser}</override>
        <override column="migration_date">${migrationTimestamp}</override>
        <override column="current_timestamp">${CURRENT_TIMESTAMP}</override>
        <override column="processed_at">${NOW}</override>
      </columnOverrides>
      

      
      <!-- 이 쿼리 실행 후 후처리 -->
      <postProcess description="사용자 테이블 이관 마무리">
        <![CDATA[
          -- 데이터 검증
          DECLARE @source_count INT, @target_count INT;
          SELECT @source_count = COUNT(*) FROM users_source WHERE created_date >= '${startDate}' AND created_date <= '${endDate}';
          SELECT @target_count = COUNT(*) FROM users WHERE migration_date = '${migrationTimestamp}';
          
          IF @source_count != @target_count
          BEGIN
            INSERT INTO migration_errors (query_id, error_message, created_date)
            VALUES ('migrate_users', 'Row count mismatch: source=' + CAST(@source_count AS VARCHAR) + ', target=' + CAST(@target_count AS VARCHAR), GETDATE());
          END
          
          -- 통계 업데이트
          UPDATE STATISTICS users;
          
          -- 완료 로그 기록
          INSERT INTO migration_log (query_id, phase, message, rows_processed, created_date)
          VALUES ('migrate_users', 'POST_PROCESS', 'User migration completed successfully', @target_count, GETDATE());
          
          -- 임시 테이블 정리
          IF OBJECT_ID('tempdb..#temp_users') IS NOT NULL DROP TABLE #temp_users;
        ]]>
      </postProcess>
    </query>

    <!-- 상품 테이블 전체 데이터 이관 (SELECT * 사용) -->
    <query id="migrate_products_all"
           description="상품 테이블 전체 데이터 이관 (SELECT * 사용)"
           targetTable="products"
           targetColumns=""
           primaryKey="product_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT * FROM products WHERE status = 'ACTIVE' ORDER BY product_id
        ]]>
      </sourceQuery>
      <!-- SELECT * 와 함께 columnOverrides 사용 예시 -->
      <columnOverrides>
        <override column="migration_status">MIGRATED_BULK</override>
        <override column="last_migration_date">${migrationTimestamp}</override>
        <override column="status">MIGRATED</override>
        <override column="bulk_processed_date">${CURRENT_DATE}</override>
        <override column="bulk_processed_time">${CURRENT_TIME}</override>
        <override column="unix_timestamp">${UNIX_TIMESTAMP}</override>
      </columnOverrides>

    </query>

    <!-- 주문 테이블 데이터 이관 (SQL 파일 사용) -->
    <query id="migrate_orders_from_file"
           description="주문 테이블 데이터 이관 (SQL 파일 사용)"
           sourceQueryFile="sql/orders_migration.sql"
           targetTable="orders"
           targetColumns="order_id,customer_id,order_date,total_amount,status"
           primaryKey="order_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT order_id,customer_id,order_date,total_amount,status
          FROM orders 
          WHERE order_date >= '${startDate}' AND order_date <= '${endDate}'
        ]]>
      </sourceQuery>

    </query>

    <!-- 특정 상태의 상품 데이터 이관 (IN절 사용) -->
    <query id="migrate_products_by_status"
           description="특정 상태의 상품 데이터 이관 (IN절 사용)"
           targetTable="products"
           targetColumns="product_id,product_name,category_id,price,status"
           primaryKey="product_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT product_id, product_name, category_id, price, status 
          FROM products 
          WHERE status IN (${statusList}) 
            AND category_id IN (${categoryIds}) 
          ORDER BY product_id
        ]]>
      </sourceQuery>

    </query>

    <!-- 특정 부서 직원 데이터 이관 (IN절 사용) -->
    <query id="migrate_employees_by_department"
           description="특정 부서 직원 데이터 이관 (IN절 사용)"
           targetTable="employees"
           targetColumns="emp_id,emp_name,department_code,hire_date,salary"
           primaryKey="emp_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT emp_id, emp_name, department_code, hire_date, salary 
          FROM employees 
          WHERE department_code IN (${departmentCodes}) 
            AND hire_date >= '${startDate}' 
          ORDER BY emp_id
        ]]>
      </sourceQuery>

    </query>

    <!-- 상품 테이블 데이터 이관 (SQL 파일 + IN절 변수 사용) -->
    <query id="migrate_products_from_file_with_in"
           description="상품 테이블 데이터 이관 (SQL 파일 + IN절 변수 사용)"
           sourceQueryFile="sql/products_in_clause_example.sql"
           targetTable="products"
           targetColumns="product_id,product_name,category_id,price,status,created_date,updated_date,category_name"
           primaryKey="product_id"
           enabled="false">

    </query>

    <!-- 활성 사용자의 주문 데이터 이관 (동적 변수 사용) -->
    <query id="migrate_user_orders_dynamic"
           description="활성 사용자의 주문 데이터 이관 (동적 변수 사용)"
           targetTable="orders"
           targetColumns="order_id,user_id,order_date,total_amount,status"
           primaryKey="order_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT order_id, user_id, order_date, total_amount, status 
          FROM orders 
          WHERE user_id IN (${activeUserIds}) 
            AND order_date >= '${startDate}' 
          ORDER BY order_date DESC
        ]]>
      </sourceQuery>

    </query>

    <!-- 추출된 상품 관련 데이터 이관 (동적 변수 사용) -->
    <query id="migrate_related_products_dynamic"
           description="추출된 상품 관련 데이터 이관 (동적 변수 사용)"
           targetTable="product_reviews"
           targetColumns=""
           primaryKey="review_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT * FROM product_reviews 
          WHERE product_id IN (${categoryProductIds}) 
            AND rating >= 4
        ]]>
      </sourceQuery>

    </query>

    <!-- multiple_columns 동적 변수 사용 예시 쿼리들 -->
    <query id="migrate_related_entities"
           description="multiple_columns로 추출된 모든 엔티티 ID를 사용한 관련 데이터 이관"
           targetTable="entity_relationships"
           targetColumns="relation_id,entity_id,related_entity_id,relation_type,created_date"
           primaryKey="relation_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT 
            relation_id,
            entity_id,
            related_entity_id,
            relation_type,
            created_date
          FROM entity_relationships 
          WHERE entity_id IN (${allEntityIds})
             OR related_entity_id IN (${allEntityIds})
          ORDER BY relation_id
        ]]>
      </sourceQuery>
      <columnOverrides>
        <override column="migration_flag">RELATED_ENTITY</override>
      </columnOverrides>
    </query>

    <!-- 방법 1: 개별 변수를 사용한 쿼리 -->
    <query id="migrate_approver_audit_logs"
           description="승인자 코드만을 사용한 감사 로그 이관"
           targetTable="audit_logs"
           targetColumns="log_id,action_type,entity_code,user_code,log_message,created_date"
           primaryKey="log_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT 
            log_id,
            action_type,
            entity_code,
            user_code,
            log_message,
            created_date
          FROM audit_logs 
          WHERE user_code IN (${approverCodes})
            AND created_date >= '${startDate}'
            AND action_type IN ('APPROVE', 'REJECT')
          ORDER BY created_date DESC
        ]]>
      </sourceQuery>
      <columnOverrides>
        <override column="migration_source">APPROVER_AUDIT</override>
      </columnOverrides>
    </query>

    <query id="migrate_requester_audit_logs"
           description="요청자 코드만을 사용한 감사 로그 이관"
           targetTable="audit_logs"
           targetColumns="log_id,action_type,entity_code,user_code,log_message,created_date"
           primaryKey="log_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT 
            log_id,
            action_type,
            entity_code,
            user_code,
            log_message,
            created_date
          FROM audit_logs 
          WHERE user_code IN (${requesterCodes})
            AND created_date >= '${startDate}'
            AND action_type = 'REQUEST'
          ORDER BY created_date DESC
        ]]>
      </sourceQuery>
      <columnOverrides>
        <override column="migration_source">REQUESTER_AUDIT</override>
      </columnOverrides>
    </query>

    <!-- 방법 2: multiple_columns 사용 (기존) -->
    <query id="migrate_audit_logs_by_codes"
           description="multiple_columns로 추출된 승인 코드들로 감사 로그 이관"
           targetTable="audit_logs"
           targetColumns="log_id,action_type,entity_code,user_code,log_message,created_date"
           primaryKey="log_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT 
            log_id,
            action_type,
            entity_code,
            user_code,
            log_message,
            created_date
          FROM audit_logs 
          WHERE (entity_code IN (${allApprovalCodes}) 
             OR user_code IN (${allApprovalCodes}))
            AND created_date >= '${startDate}'
            AND action_type IN ('APPROVE', 'REJECT', 'REQUEST')
          ORDER BY created_date DESC
        ]]>
      </sourceQuery>
      <columnOverrides>
        <override column="migration_source">APPROVAL_AUDIT</override>
      </columnOverrides>
    </query>

    <!-- 방법 3: column_identified 사용 (NEW!) -->
    <query id="migrate_audit_logs_by_identified_codes"
           description="컬럼별로 식별된 승인 코드들을 사용한 감사 로그 이관"
           targetTable="audit_logs"
           targetColumns="log_id,action_type,entity_code,user_code,log_message,created_date"
           primaryKey="log_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT 
            log_id,
            action_type,
            entity_code,
            user_code,
            log_message,
            created_date
          FROM audit_logs 
          WHERE (
            -- 승인자 코드로 필터링
            (user_code IN (${approvalCodesById.approver_code}) AND action_type IN ('APPROVE', 'REJECT'))
            OR 
            -- 요청자 코드로 필터링  
            (user_code IN (${approvalCodesById.requester_code}) AND action_type = 'REQUEST')
            OR
            -- 제품 코드로 필터링
            (entity_code IN (${approvalCodesById.product_code}) AND action_type LIKE '%PRODUCT%')
          )
            AND created_date >= '${startDate}'
          ORDER BY created_date DESC
        ]]>
      </sourceQuery>
      <columnOverrides>
        <override column="migration_source">IDENTIFIED_APPROVAL_AUDIT</override>
      </columnOverrides>
    </query>

    <!-- 컬럼별 식별을 활용한 복합 쿼리 예시 -->
    <query id="migrate_complex_approval_relations"
           description="컬럼별 식별된 코드들을 사용한 복합 관계 데이터 이관"
           targetTable="approval_relations"
           targetColumns="relation_id,approver_id,requester_id,product_id,relation_type,created_date"
           primaryKey="relation_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT 
            ar.relation_id,
            ar.approver_id,
            ar.requester_id,
            ar.product_id,
            ar.relation_type,
            ar.created_date
          FROM approval_relations ar
          WHERE ar.approver_id IN (${approvalCodesById.approver_code})
            AND ar.requester_id IN (${approvalCodesById.requester_code})
            AND ar.product_id IN (${approvalCodesById.product_code})
            AND ar.created_date >= '${startDate}'
          UNION
          SELECT 
            ar2.relation_id,
            ar2.approver_id,
            ar2.requester_id,
            ar2.product_id,
            ar2.relation_type,
            ar2.created_date
          FROM approval_relations ar2
          WHERE (ar2.approver_id IN (${approvalCodesById}) 
             OR ar2.requester_id IN (${approvalCodesById}))
            AND ar2.created_date >= '${startDate}'
          ORDER BY created_date DESC
        ]]>
      </sourceQuery>
      <columnOverrides>
        <override column="migration_source">COMPLEX_APPROVAL_RELATION</override>
      </columnOverrides>
    </query>

  </queries>
</migration> 