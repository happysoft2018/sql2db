<?xml version="1.0" encoding="UTF-8"?>
<migration>
  <!-- 전역 기본 설정 -->
  <settings>
    <!-- 데이터베이스 연결 설정 (dbinfo.json 참조) -->
    <sourceDatabase>sourceDB</sourceDatabase>
    <targetDatabase>targetDB</targetDatabase>
    <!-- 이관 기본 설정 -->
    <batchSize>${batchSize}</batchSize>
    <deleteBeforeInsert>true</deleteBeforeInsert>
  </settings>

  <!-- 운영 환경 전역 변수 정의 -->
  <variables>
    <var name="startDate">2024-01-01</var>
    <var name="endDate">2024-12-31</var>
    <var name="batchSize">2000</var>
    <var name="companyCode">PROD_COMPANY</var>
    <var name="statusList">["ACTIVE", "APPROVED", "COMPLETED"]</var>
    <var name="categoryIds">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</var>
    <var name="enableForeignKeyOrder">true</var>
  </variables>

  <!-- 전역 컬럼 오버라이드 설정 -->
  <globalColumnOverrides>
    <!-- 모든 쿼리에 공통으로 적용될 컬럼 값들 -->
    <override column="created_by">SYSTEM_MIGRATOR</override>
    <override column="updated_by">SYSTEM_MIGRATOR</override>
    <override column="migration_timestamp">${migrationTimestamp}</override>
    <override column="migration_batch_id">${companyCode}_${startDate}</override>
    <override column="data_source">PROD_MIGRATION</override>
  </globalColumnOverrides>

  <!-- 운영 환경 전역 전처리/후처리 -->
  <globalProcesses>
    <!-- 운영 이관 시작 전 실행 -->
    <preProcess description="운영 환경 이관 준비">
      <![CDATA[
        -- 운영 환경 성능 최적화
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
        
        -- 대용량 처리를 위한 설정
        ALTER DATABASE CURRENT SET RECOVERY SIMPLE;
        
        -- 이관 시작 로그
        INSERT INTO prod_migration_log (batch_id, phase, message, created_date)
        VALUES ('${companyCode}_${startDate}', 'GLOBAL_PRE', 'Production migration started', GETDATE());
        
        -- 백업 테이블 생성
        IF OBJECT_ID('users_backup_${startDate}') IS NULL
        BEGIN
          SELECT * INTO users_backup_${startDate} FROM users WHERE 1=0;
          SELECT * INTO orders_backup_${startDate} FROM orders WHERE 1=0;
        END
      ]]>
    </preProcess>
    
    <!-- 운영 이관 완료 후 실행 -->
    <postProcess description="운영 환경 이관 마무리">
      <![CDATA[
        -- 복구 모델 원복
        ALTER DATABASE CURRENT SET RECOVERY FULL;
        
        -- 성능 통계 업데이트
        EXEC sp_updatestats;
        
        -- 인덱스 조각 모음
        DECLARE @sql NVARCHAR(MAX) = '';
        SELECT @sql = @sql + 'ALTER INDEX ALL ON ' + QUOTENAME(name) + ' REORGANIZE; '
        FROM sys.tables WHERE name IN ('users', 'orders');
        EXEC sp_executesql @sql;
        
        -- 이관 완료 로그 및 통계
        DECLARE @total_users INT, @total_orders INT;
        SELECT @total_users = COUNT(*) FROM users WHERE migration_batch_id = '${companyCode}_${startDate}';
        SELECT @total_orders = COUNT(*) FROM orders WHERE created_date >= '${startDate}';
        
        INSERT INTO prod_migration_log (batch_id, phase, message, rows_processed, created_date)
        VALUES ('${companyCode}_${startDate}', 'GLOBAL_POST', 'Production migration completed successfully', @total_users + @total_orders, GETDATE());
        
        -- 알림 메일 발송을 위한 플래그 설정
        INSERT INTO notification_queue (type, message, created_date)
        VALUES ('MIGRATION_COMPLETE', 'Production data migration completed for ${companyCode}', GETDATE());
      ]]>
    </postProcess>
  </globalProcesses>

  <!-- 운영 환경 동적 변수 정의 -->
  <dynamicVariables>
    <dynamicVar id="extract_prod_active_users" 
                description="운영용 활성 사용자 ID 목록 추출"
                variableName="activeUserIds"
                extractType="single_column"
                columnName="user_id"
                enabled="true">
      <![CDATA[
        SELECT user_id FROM users 
        WHERE status = 'ACTIVE' 
          AND environment = 'PROD'
          AND last_login_date >= '${startDate}'
      ]]>
    </dynamicVar>

    <dynamicVar id="extract_prod_companies"
                description="운영 환경 회사 정보 추출"
                variableName="companyMapping"
                extractType="key_value_pairs"
                enabled="false">
      <![CDATA[
        SELECT company_code, company_name 
        FROM companies 
        WHERE status = 'ACTIVE' AND environment = 'PROD'
      ]]>
    </dynamicVar>
  </dynamicVariables>

  <!-- 운영 환경 쿼리 정의 -->
  <queries>
    <!-- 운영용 사용자 테이블 데이터 이관 -->
    <query id="migrate_prod_users"
           description="운영용 사용자 테이블 데이터 이관"
           targetTable="users"
           targetColumns="user_id,username,email,created_date,company_code,environment,migration_batch_id,last_updated"
           primaryKey="user_id"
           enabled="true">
      <sourceQuery>
        <![CDATA[
          SELECT user_id, username, email, created_date, company_code 
          FROM users 
          WHERE created_date >= '${startDate}' 
            AND created_date <= '${endDate}' 
            AND environment = 'PROD'
            AND company_code = '${companyCode}' 
          ORDER BY user_id
        ]]>
      </sourceQuery>
      <!-- 개별 쿼리용 컬럼 오버라이드 (전역 설정에 추가/덮어쓰기) -->
      <columnOverrides>
        <override column="environment">PROD_TARGET</override>
        <override column="last_updated">GETDATE()</override>
        <!-- migration_batch_id는 전역 설정에서 이미 정의됨 -->
      </columnOverrides>
      <deleteWhere>
        <![CDATA[
          WHERE environment = 'PROD' 
            AND company_code = '${companyCode}'
        ]]>
      </deleteWhere>
    </query>

    <!-- 운영용 주문 데이터 이관 (동적 변수 사용) -->
    <query id="migrate_prod_orders"
           description="운영용 주문 데이터 이관 (활성 사용자만)"
           targetTable="orders"
           targetColumns="order_id,user_id,order_date,total_amount,status"
           primaryKey="order_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT order_id, user_id, order_date, total_amount, status 
          FROM orders 
          WHERE user_id IN (${activeUserIds}) 
            AND order_date >= '${startDate}'
            AND status IN (${statusList})
          ORDER BY order_date DESC
        ]]>
      </sourceQuery>
      <deleteWhere>
        <![CDATA[
          WHERE user_id IN (${activeUserIds}) 
            AND order_date >= '${startDate}'
        ]]>
      </deleteWhere>
    </query>

    <!-- 운영용 상품 데이터 이관 -->
    <query id="migrate_prod_products"
           description="운영용 상품 데이터 이관"
           targetTable="products"
           targetColumns=""
           primaryKey="product_id"
           enabled="false">
      <sourceQuery>
        <![CDATA[
          SELECT * FROM products 
          WHERE category_id IN (${categoryIds}) 
            AND status IN (${statusList})
            AND environment = 'PROD'
          ORDER BY product_id
        ]]>
      </sourceQuery>
      <deleteWhere>
        <![CDATA[
          WHERE category_id IN (${categoryIds}) 
            AND environment = 'PROD'
        ]]>
      </deleteWhere>
    </query>
  </queries>
</migration> 